version: '3'
services:
  zookeeper:
    mem_limit: 500000000
    image: 'bitnami/zookeeper:latest'
    restart: always
    networks:
      - ergodex-stats-net
    ports:
      - '2181:2181'
    environment:
      - ALLOW_ANONYMOUS_LOGIN=yes
  kafka:
    mem_limit: 1000000000
    depends_on:
      - zookeeper
    image: 'bitnami/kafka:latest'
    restart: always
    networks:
      - ergodex-stats-net
    environment:
      - KAFKA_BROKER_ID=1
      - KAFKA_CFG_LISTENERS=PLAINTEXT://:9092
      - KAFKA_CFG_ADVERTISED_LISTENERS=PLAINTEXT://kafka:9092
      - KAFKA_CFG_ZOOKEEPER_CONNECT=zookeeper:2181
      - ALLOW_PLAINTEXT_LISTENER=yes
  redis:
    mem_limit: 50000000
    container_name: redis
    image: 'redis:latest'
    restart: always
    networks:
      - ergodex-stats-net
    volumes:
      - redis-data:/data
  postgres:
    mem_limit: 50000000
    container_name: postgres
    image: 'postgres:14'
    restart: always
    ports:
      - 5432:5432
    environment:
      POSTGRES_USER: ergodex
      POSTGRES_PASSWORD: ergodex
      POSTGRES_DB: ergodex
    networks:
      - ergodex-stats-net
    volumes:
      - ./db/schema.sql:/docker-entrypoint-initdb.d/schema.sql
      - postgres-data:/var/lib/postgresql/data/
  markets-index:
    mem_limit: 500000000
    container_name: markets-index
    restart: always
    build: 
      context: ./markets-index  
      dockerfile: Dockerfile    
    depends_on:
      - kafka
      - redis
      - postgres
    networks:
      - ergodex-stats-net
  api:
    container_name: api
    restart: always
    build:
      context: ./backend
      dockerfile: Dockerfile
    environment:
      POSTGRES_SERVER: postgres
      POSTGRES_USER: ergodex
      POSTGRES_PASSWORD: ergodex
      POSTGRES_DB: ergodex
    depends_on:
      - postgres
    ports:
      - 8080:8080
    networks:
      - ergodex-stats-net
networks:
  ergodex-stats-net:
volumes:
  redis-data:
  postgres-data: